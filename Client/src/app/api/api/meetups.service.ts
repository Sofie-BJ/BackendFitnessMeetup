/**
 * Fitness Meetup
 * The public API for the FitnessMeetup platform
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from "@angular/core";
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent
} from "@angular/common/http";
import { CustomHttpUrlEncodingCodec } from "../encoder";

import { Observable } from "rxjs/Observable";

import { Meetup } from "../model/meetup";
import { User } from "../model/user";

import { BASE_PATH, COLLECTION_FORMATS } from "../variables";
import { Configuration } from "../configuration";

@Injectable()
export class MeetupsService {
  protected basePath = "http://localhost:8080";
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.configuration.basePath =
        configuration.basePath || basePath || this.basePath;
    } else {
      this.configuration.basePath = basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = "multipart/form-data";
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Add a new meetup to the database.
   *
   * @param meetup Meetup object that needs to be added to the database.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addMeetup(
    meetup: Meetup,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<any>;
  public addMeetup(
    meetup: Meetup,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public addMeetup(
    meetup: Meetup,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public addMeetup(
    meetup: Meetup,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (meetup === null || meetup === undefined) {
      throw new Error(
        "Required parameter meetup was null or undefined when calling addMeetup."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<any>(
      `${this.configuration.basePath}/meetups`,
      meetup,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Adds a participant to a specific meetup
   *
   * @param id The unique identifier for the specific meetup
   * @param user User to add
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addParticipant(
    id: number,
    user: User,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<any>;
  public addParticipant(
    id: number,
    user: User,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public addParticipant(
    id: number,
    user: User,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public addParticipant(
    id: number,
    user: User,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling addParticipant."
      );
    }
    if (user === null || user === undefined) {
      throw new Error(
        "Required parameter user was null or undefined when calling addParticipant."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<any>(
      `${this.configuration.basePath}/meetups/${encodeURIComponent(
        String(id)
      )}/participants`,
      user,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get information about the meetup with the specified id.
   *
   * @param id The unique identifier of the meetup to retrieve.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getMeetup(
    id: number,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Meetup>;
  public getMeetup(
    id: number,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Meetup>>;
  public getMeetup(
    id: number,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Meetup>>;
  public getMeetup(
    id: number,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling getMeetup."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Meetup>(
      `${this.configuration.basePath}/meetups/${encodeURIComponent(
        String(id)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get a list of upcoming meetups using paging.
   * By default, this returns the next 25 upcoming meetups, and does not skip any.
   * @param offset How many meetups to skip from the first upcoming meetup.
   * @param count How many meetups to retrieve.
   * @param sport The type of sport to filter meetups by. This filter is not used if not specified.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getUpcomingMeetups(
    offset?: number,
    count?: number,
    sport?: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Array<Meetup>>;
  public getUpcomingMeetups(
    offset?: number,
    count?: number,
    sport?: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<Meetup>>>;
  public getUpcomingMeetups(
    offset?: number,
    count?: number,
    sport?: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<Meetup>>>;
  public getUpcomingMeetups(
    offset?: number,
    count?: number,
    sport?: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (offset !== undefined && offset !== null) {
      queryParameters = queryParameters.set("offset", <any>offset);
    }
    if (count !== undefined && count !== null) {
      queryParameters = queryParameters.set("count", <any>count);
    }
    if (sport !== undefined && sport !== null) {
      queryParameters = queryParameters.set("sport", <any>sport);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<Meetup>>(
      `${this.configuration.basePath}/meetups`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
